using System;
using System.Collections.Generic;

public class Scripture
{
    /* Encapsulation application :) */
    private List<Word> _words;

    /* A random number generator that I use when I need to hide a random word by its index. You'll later see it. */
    private Random _random = new Random();

    /* In summary, I create an empty list _words, then I create an array of strings called parts where 
    I store the strings that comes from the text string, since it was split after every space (' ') by the method .Split() */
    public Scripture(string text)
    {
        _words = new List<Word>();

        string[] parts = text.Split(' ');

        /* Then, I iterate through every variable */
        foreach (string part in parts)
        {
            /* And add them to the list as objects. */
            _words.Add(new Word(part));
        }
    }

    /* Method to hide a random word if it isn't already hidden. Here is were I applied all the logic. 
    It may seems simple, but the process was awful. This third assignment was really difficult.*/
    public void HideRandomWords(int count)
    {
        /* List where I will store all the visible words by index. */
        List<int> visible = new List<int>();

        /* Logic goes like this: */
        /* I iterate through every word in the _words list, previously stored as objects, as long as the variable i is not less 
        than the amount of variables stored in the list and I use i++ to keep increasing the number so I iterate through all 
        of the variables by index, depending on how many words were stored, the total of indexes may change. Anyways, I've already 
        explained this before. */
        for (int i = 0; i < _words.Count; i++)
        {
            /* If the word with the due index is not hidden. */
            if (!_words[i].IsHidden())
            {
                /* I added to the visible indexes list. */
                visible.Add(i);
            }
        } /* At first, all of the words will be marked as not hidden, since the user has just started the code, 
        but gradually, the words that are visible and the ones that were already hidden will be divided, that way 
        I hide all of the words at the end. */

        /* Same loop, but little difference, it's that this will loop as long as i is less than the int variable provided, that is, 
        the amount of words I want to hide and the total number of variables within the new list of visible words.*/
        for (int i = 0; i < count && visible.Count > 0; i++)
        {
            /* I create a variable to store the index/random number generated by the method next() of the class _random, giving 
            the parameter as the amount of total numbers in the list. It means that, if the list length is 10, the method .Next() 
            will provide a number between 0 and 9. */
            int randomIndex = _random.Next(visible.Count);
            /* Once I get the number and store it, I use it to randomly refer to the index within the list, so a random word hides. */
            int toHide = visible[randomIndex];
            /* I use the method Hide() in the class _words, that I already explain in that class with a commentary. */
            _words[toHide].Hide();
            /* And I remove the index within the list so when I'm iterating I don't find the already hidden word index. */
            visible.RemoveAt(randomIndex);
        }
    }

    /* Method used to display the text. */
    public string GetDisplayText()
    {
        /* A string called result that is instantly used. */
        string result = "";

        /* Loop to iterate through all of the variables inside the list */
        foreach (Word word in _words)
        {
            /* And I append them all while iterating through them, so the value stored in result is the whole 
            text altogether again separated by an space, either hidden or visible words with their respective 
            format ("The regular words like 'thy' or the hidden like '____'). */
            result += word.GetDisplayText() + " ";
        }
        /*  Finally, I use .Trim() to remove any external spaces, internal keeps as normal. */
        return result.Trim();
    }

    /* Method to return a boolean, most of the time false, but only true when all the words were finally hidden. */
    public bool AllWordsHidden()
    {
        /* Iterate through all of the variables of the list. */
        foreach (Word word in _words)
        {
            /* Check if the word is not hidden (Use of !). In that case, I will return false and the keep will keep going. */
            if (!word.IsHidden())
                return false;
        }
        /* Otherwise, it will return true and the loop will finally end. */
        return true;
    }
}